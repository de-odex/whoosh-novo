[project]
name = "Whoosh-Novo"
dynamic = ["version"]
description = "Fast, pure-Python full text indexing, search, and spell checking library."
readme = "README.md"
license = { text = "Two-clause BSD license" }
keywords = ["index", "search", "text", "spell"]
urls = { Homepage = "https://github.com/de-odex/whoosh-novo" }
authors = [
  { name = "Matt Chaput", email = "matt@whoosh.ca" },
]
maintainers = [
  # not sure if i'm meant to leave this in when i'm possibly syncing with their branch
  # once they start contributing again
  # { name = "Sygil-Dev" },
  { name = "de-odex" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Text Processing :: Indexing",
]
requires-python = ">=3.9"
dependencies = [
  "cached-property~=2.0.1",
]

[dependency-groups]
test = [
  "pytest~=8.3.5",
  "pytest-sugar~=1.0.0",
]
cov = [
  "pytest-cov~=6.0.0",
]
dev = [
  { include-group = "test" },
  "nox~=2025.2.9",
  "ruff~=0.11.0",
  "flynt~=1.0.2",
  "pre-commit~=4.1.0",
]


[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"


[tool.setuptools]
package-dir = { "" = "src" }
zip-safe = true

[tool.setuptools.packages.find]
where = ["src"]


[tool.coverage.run]
branch = true
omit = [
  # Autogenerated missed code handles other VCSes.
  "devito/_version.py",
  "examples/*__init__*",
  "noxfile.py",
  "setup.py",
]
concurrency = ["multiprocessing"]
parallel = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]


[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # ===== to re-enable =====
  "A",     # flake8-builtins
  "ANN",   # flake8-annotations
  "ARG",   # flake8-unused-arguments
  "B",     # flake8-bugbear
  "COM",   # flake8-commas
  "CPY",   # flake8-copyright
  "E",     # pycodestyle
  "ERA",   # eradicate
  "FBT",   # flake8-boolean-trap
  "FURB",  # refurb
  "INP",   # flake8-no-pep420
  "ISC",   # flake8-implicit-str-concat
  "N",     # pep8-naming
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PL",    # Pylint
  "PT",    # flake8-pytest-style
  "PTH",   # flake8-use-pathlib
  "RET",   # flake8-return
  "RSE",   # flake8-raise
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLF",   # flake8-self
  "T10",   # flake8-debugger
  "T20",   # flake8-print
  "TRY",   # tryceratops

  # flake8-datetimez
  # DTZ901 Use of `datetime.datetime.min` without timezone information
  "DTZ901",

  # Ruff
  # Mutable class attributes should be annotated with `typing.ClassVar`
  "RUF012",
  # Unused noqa directive
  # (current 'noqa's may be needed in the future when we re-enable some of the
  # currently ignored lint rules)
  "RUF100",

  # ===== undesirable =====

  "D",    # pydocstyle
  "EM",   # flake8-errmsg
  "FIX",  # flake8-fixme
  "TD",   # flake8-todos

  # Ruff
  # __all__ is not sorted
  "RUF022",
  # {}.__slots__ is not sorted
  "RUF023",

  # ===== doesn't apply =====

  "AIR",   # Airflow
  "FAST",  # FastAPI
  "PD",    # pandas-vet

  # ===== to be disabled with formatter =====

  # tab-indentation (W191)
  "W191",
  # indentation-with-invalid-multiple (E111)
  "E111",
  # indentation-with-invalid-multiple-comment (E114)
  "E114",
  # over-indented (E117)
  "E117",
  # docstring-tab-indentation (D206)
  "D206",
  # triple-single-quotes (D300)
  "D300",
  # bad-quotes-inline-string (Q000)
  "Q000",
  # bad-quotes-multiline-string (Q001)
  "Q001",
  # bad-quotes-docstring (Q002)
  "Q002",
  # avoidable-escaped-quote (Q003)
  "Q003",
  # missing-trailing-comma (COM812)
  "COM812",
  # prohibited-trailing-comma (COM819)
  "COM819",

  # ===== miscellaneous =====

  # flake8-executable (EXE)
  # Shebang is present but file is not executable
  "EXE001",

  # Pyflakes
  # {name} imported but unused; consider using importlib.util.find_spec to test for availability
  "F401",
  # Redefinition of unused {name} from {row}
  "F811",
  # Local variable {name} is assigned to but never used
  "F841",

  # Perflint
  # try-except within a loop incurs performance overhead
  "PERF203",

  # pyupgrade
  # Use format specifiers instead of percent format
  "UP031",
]

[tool.ruff.lint.per-file-ignores]
"src/whoosh/compat.py" = [
  # Undefined name {name}.
  "F821",
]
"src/whoosh/filedb/filestore.py" = [
  # Replace aliased errors with OSError
  "UP024",
]
"src/whoosh/util/__init__.py" = [
  # Undefined name {name}.
  "F821",
]

"**/{benchmark,stress,tests}/*" = [
  # flake8-annotations
  # (type annotations)
  "ANN",

  # flake8-no-pep420
  # File {filename} is part of an implicit namespace package. Add an __init__.py.
  "INP001",

  # flake8-bandit
  # Use of assert detected
  "S101",

  # flake8-self
  # Private member accessed: {access}
  "SLF001",

  # flake8-print
  # (detects print statements)
  "T20",
]

[tool.ruff.lint.mccabe]
max-complexity = 45  # Default is 10

[tool.ruff.lint.pylint]
max-args = 22         # Default is 5
max-branches = 79     # Default is 12
max-returns = 16      # Default is 6
max-statements = 256  # Default is 50
