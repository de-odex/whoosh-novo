[project]
name = "Whoosh-Reloaded"
dynamic = ["version"]
description = "Fast, pure-Python full text indexing, search, and spell checking library."
readme = "README.md"
license = { text = "Two-clause BSD license" }
keywords = ["index", "search", "text", "spell"]
urls = { Homepage = "https://github.com/Sygil-Dev/whoosh-reloaded" }
authors = [
  { name = "Matt Chaput", email = "matt@whoosh.ca" },
]
maintainers = [
  { name = "Sygil-Dev" },
  { name = "de-odex" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Text Processing :: Indexing",
]
requires-python = ">=3.9"
dependencies = [
  "cached-property~=2.0.1",
]

[dependency-groups]
test = [
  "pytest~=8.3.5",
  "pytest-sugar~=1.0.0",
  "nose~=1.3.7",
]
cov = [
  "pytest-cov~=6.0.0",
]
dev = [
  { include-group = "test" },
  "ruff~=0.11.0",
  "flynt~=1.0.2",
  "pre-commit~=4.1.0",
]


[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"


[tool.setuptools]
package-dir = { "" = "src" }
zip-safe = true

[tool.setuptools.packages.find]
where = ["src"]


[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = [
  "AIR",    # Airflow
  "ASYNC",  # flake8-async
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "C90",    # McCabe cyclomatic complexity
  "DJ",     # flake8-django
  "DTZ",    # flake8-datetimez
  "EXE",    # flake8-executable
  "F",      # Pyflakes
  "FA",     # flake8-future-annotations
  "G",      # flake8-logging-format
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "INT",    # flake8-gettext
  "LOG",    # flake8-logging
  "NPY",    # NumPy-specific rules
  "PERF",   # Perflint
  "PLC",    # Pylint conventions
  "PLE",    # Pylint errors
  "PLR091", # Pylint Refactor just for max-args, max-branches, etc.
  "PYI",    # flake8-pyi
  "Q",      # flake8-quotes
  "SLOT",   # flake8-slots
  "TCH",    # flake8-type-checking
  "TID",    # flake8-tidy-imports
  "TRIO",   # flake8-trio
  "UP",     # pyupgrade
  "W",      # pycodestyle
  "YTT",    # flake8-2020
  # "A",    # flake8-builtins
  # "ANN",  # flake8-annotations
  # "ARG",  # flake8-unused-arguments
  # "B",    # flake8-bugbear
  # "COM",  # flake8-commas
  # "CPY",  # flake8-copyright
  # "D",    # pydocstyle
  # "E",    # pycodestyle
  # "EM",   # flake8-errmsg
  # "ERA",  # eradicate
  # "FBT",  # flake8-boolean-trap
  # "FIX",  # flake8-fixme
  # "FLY",  # flynt
  # "FURB", # refurb
  # "INP",  # flake8-no-pep420
  # "ISC",  # flake8-implicit-str-concat
  # "N",    # pep8-naming
  # "PD",   # pandas-vet
  # "PGH",  # pygrep-hooks
  # "PIE",  # flake8-pie
  # "PL",   # Pylint
  # "PT",   # flake8-pytest-style
  # "PTH",  # flake8-use-pathlib
  # "RET",  # flake8-return
  # "RSE",  # flake8-raise
  # "RUF",  # Ruff-specific rules
  # "S",    # flake8-bandit
  # "SIM",  # flake8-simplify
  # "SLF",  # flake8-self
  # "T10",  # flake8-debugger
  # "T20",  # flake8-print
  # "TD",   # flake8-todos
  # "TRY",  # tryceratops
]
ignore = [
  "EXE001",
  "F401",
  "F811",
  "F841",
  "PERF203",
  "UP031",
]

[tool.ruff.lint.mccabe]
max-complexity = 45  # Default is 10

[tool.ruff.lint.per-file-ignores]
"src/whoosh/compat.py" = ["F821"]
"src/whoosh/filedb/filestore.py" = ["UP024"]
"src/whoosh/util/__init__.py" = ["F821"]

[tool.ruff.lint.pylint]
max-args = 22  # Default is 5
max-branches = 79  # Default is 12
max-returns = 16  # Default is 6
max-statements = 256  # Default is 50


[tool.tox]
requires = ["tox>=4"]
env_list = ["py39", "py310", "py311", "py312", "py313"]

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"

[tool.tox.env.test]
dependency_groups = ["test"]
commands = [["pytest", { replace = "posargs", default = ["tests"], extend = true }]]

[tool.tox.env.coverage]
dependency_groups = ["test", "cov"]
commands = [
  ["pytest", "--cov-branch", "--cov-report=xml", { replace = "posargs", default = ["tests"], extend = true }],
]
